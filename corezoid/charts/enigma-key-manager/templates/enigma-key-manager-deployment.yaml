{{- if eq .Values.global.enigma.enabled true }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.appName }}-deployment
  labels:
    app: {{ .Values.global.product }}
    tier: {{ .Values.appName }}
spec:
  selector:
    matchLabels:
      tier: {{ .Values.appName }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 25%
  template: # create pods using pod definition in this template
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/enigma-key-manager-configmap.yaml") . | sha256sum }}
      labels:
        app: {{ .Values.global.product }}
        tier: {{ .Values.appName }}
    spec:
      terminationGracePeriodSeconds: 40
      {{- if .Values.global.enigma.key_manager.aws_kms_role }}
      serviceAccountName: enigma-kms-service
      {{- end }}
      initContainers:
        - name: init-wait
          image: "{{- if and (ne .Values.global.imageRegistry "") (ne .Values.global.imageRegistry "docker-hub.middleware.biz") }}{{ .Values.global.imageRegistry }}/{{- end}}{{ .Values.alpineImage.registry }}/{{ if .Values.global.useCentos8 }}{{ .Values.global.centos8Repo }}/{{ else }}{{- if not (eq .Values.global.repotype "") }}{{ .Values.global.repotype }}/{{- end }}{{ end }}{{ .Values.alpineImage.repository }}:{{ .Values.alpineImage.tag }}"
          command: ["sh", "-c", "until {{- if .Values.global.db.bouncer }} nc -zvw1 pgbouncer-service 5432 && {{- end }} nc -zvw1 postgresql 5432 {{- if not .Values.global.db.internal }} && nc -zvw1 ${POSTGRES_DBHOST} ${POSTGRES_DBPORT} {{- end }} ; do echo waiting for dependences; sleep 2; done;"]
          env:
            - name: POSTGRES_DBHOST
              {{- if .Values.global.db.bouncer }}
              value: "pgbouncer-service"
              {{- else }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.db.secret.name }}
                  key: dbhost
                {{- end }}
            - name: POSTGRES_DBPORT
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.db.secret.name }}
                  key: postgres_dbport
      shareProcessNamespace: true
      containers:
        - name: {{ .Values.appName }}
          image: "{{- if and (ne .Values.global.imageRegistry "") (ne .Values.global.imageRegistry "docker-hub.middleware.biz") }}{{ .Values.global.imageRegistry }}/{{- end}}{{ .Values.image.registry }}/{{ if .Values.global.useCentos8 }}{{ .Values.global.centos8Repo }}/{{ else }}{{- if not (eq .Values.global.repotype "") }}{{ .Values.global.repotype }}/{{- end }}{{ end }}{{ .Values.image.repository }}:{{ .Values.global.enigma.key_manager.tag }}"
          imagePullPolicy: {{ .Values.global.imagePullPolicy | default "IfNotPresent" }}
          env:
          - name: POSTGRES_DBHOST
          {{- if .Values.global.db.bouncer }}
            value: "pgbouncer-service"
          {{- else }}
            valueFrom:
              secretKeyRef:
                name: {{ .Values.global.db.secret.name }}
                key: postgres_dbhost
          {{- end }}
          - name: POSTGRES_DBPORT
            valueFrom:
              secretKeyRef:
                name: {{ .Values.global.db.secret.name }}
                key: postgres_dbport
          - name: POSTGRES_DBUSER
            valueFrom:
              secretKeyRef:
                name: {{ .Values.global.db.secret.name }}
                key: postgres_dbuser
          - name: POSTGRES_DBPWD
            valueFrom:
              secretKeyRef:
                name: {{ .Values.global.db.secret.name }}
                key: postgres_dbpwd
          ports:
          - containerPort: 8080
          resources:
            {{ .Values.global.enigma.key_manager.resources | toYaml | indent 12 | trim }}
          volumeMounts:
            - name: {{ .Values.appName }}-config
              mountPath: /ebsmnt/enigma-key-manager/config/production.json
              subPath: production.json
{{- if .Values.global.imagePullSecrets }}
      imagePullSecrets:
      {{- range $pullSecret := .Values.global.imagePullSecrets }}
        - name: {{ $pullSecret }}
      {{- end }}
{{- end }}
      volumes:
        - name: {{ .Values.appName }}-config
          configMap:
            name: {{ .Values.appName }}-config
{{- end }}
